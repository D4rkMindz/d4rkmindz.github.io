(window.webpackJsonp=window.webpackJsonp||[]).push([[274],{507:function(e,a,n){"use strict";n.r(a);var r=n(4),t=Object(r.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"sql"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sql","aria-hidden":"true"}},[e._v("#")]),e._v(" SQL")]),e._v(" "),n("p",[e._v("In SQL wird eine Datenbankabfrage ausgeführt. Das Wort SQL steht für Structured Query Language. Früher hiess diese Sprache SEQUEL (Structured English QUery Language).")]),e._v(" "),n("p",[e._v("SQL bietet mehrere Datenbankoperationen an. Ein Teil davon ist unten aufgelistet.")]),e._v(" "),n("h3",{attrs:{id:"insert"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#insert","aria-hidden":"true"}},[e._v("#")]),e._v(" INSERT")]),e._v(" "),n("p",[e._v("Dieser Befehl fügt Daten in eine Tabelle ein.")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("INSERT [INTO] table[(attribute1, attribute2)] VALUES(value1, value2);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h3",{attrs:{id:"update"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#update","aria-hidden":"true"}},[e._v("#")]),e._v(" UPDATE")]),e._v(" "),n("p",[e._v("Aktualisiert Daten.")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("UPDATE table SET attribute1 = newValue1, attribute2 = newValue2 [WHERE condition];\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h3",{attrs:{id:"delete"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delete","aria-hidden":"true"}},[e._v("#")]),e._v(" DELETE")]),e._v(" "),n("p",[e._v("Löscht Daten.")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('-- ACHTUNG, ohne "WHERE condition" wird die ganze Tabelle geleert! \nDELETE FROM table [WHERE condition];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("h3",{attrs:{id:"joins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#joins","aria-hidden":"true"}},[e._v("#")]),e._v(" JOINS")]),e._v(" "),n("p",[e._v("Da man Tabellen aus Effizienzgründen "),n("a",{attrs:{href:"/de/wiki/programmiersprachen/datenbanken/relational/normalisierung"}},[e._v("normalisiert")]),e._v(" muss man irgendwann diese Daten wieder zusammenführen. Dazu gibt es den JOIN Befehl in verschiedenen Arten. Einen sehr guten Überblick findet man "),n("a",{attrs:{href:"https://www.linux-tips-and-tricks.de/de/datenbanken/10-sql-joins-einfach-erklaert",target:"_blank",rel:"noopener noreferrer"}},[e._v("hier"),n("OutboundLink")],1),e._v(" und "),n("a",{attrs:{href:"https://glossar.hs-augsburg.de/Verbundoperatoren_(Join)",target:"_blank",rel:"noopener noreferrer"}},[e._v("hier"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[n("img",{attrs:{src:"/de/wiki/programmiersprachen/datenbanken/sql_joins.png",alt:"No alt text available"}})]),e._v(" "),n("h4",{attrs:{id:"inner-join"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inner-join","aria-hidden":"true"}},[e._v("#")]),e._v(" INNER JOIN")]),e._v(" "),n("p",[e._v("Der Inner Join verbindet Datensätze aus zwei Tabellen bei denen die Werte in beiden Tabellen gleich sind. Es gibt keine leeren Datensätze.")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT customer.id, customer.name, order.id, order.brutto FROM customer INNER JOIN order ON order.id = customer.order_id;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h4",{attrs:{id:"left-join"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#left-join","aria-hidden":"true"}},[e._v("#")]),e._v(" LEFT JOIN")]),e._v(" "),n("p",[e._v("Bei diesem Join werden alle Datensätze aus der linken (ersten; customer) Tabelle genommen und mit Datensätzen aus der rechten (zweite; order) Tabelle verknüpft. Wenn keine Verknüpfung erstellt werden kann, dann bleiben die zu ergänzenden Werte leer.")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT customer.id, customer.name, order.id, order.brutto FROM customer LEFT JOIN order ON order.id = customer.order_id;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h4",{attrs:{id:"right-join"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#right-join","aria-hidden":"true"}},[e._v("#")]),e._v(" RIGHT JOIN")]),e._v(" "),n("p",[e._v("Dieser Join ist das genaue Gegenteil des Left Joins. Hier werden die Datensätze aus der rechten (zweite; order) Tabelle genommen und mit Daten aus der linken (erste; customer) Tabelle ergänzt.")]),e._v(" "),n("p",[e._v("<color #ed1c24>Dieser Join sollte nicht verwendet werden"),e._v(".")]),e._v(" "),n("p",[e._v("MySQL empfiehlt den SQL-Query so zu schreiben, dass man aus einem RIGHT JOIN einen LEFT JOIN macht.")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT customer.id, customer.name, order.id, order.brutto FROM customer RIGHT JOIN order ON order.id = customer.order_id;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h4",{attrs:{id:"full-join"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#full-join","aria-hidden":"true"}},[e._v("#")]),e._v(" FULL JOIN")]),e._v(" "),n("p",[e._v("Der Full Join (auch Full Outer Join genannt) ist eine Kombination von Left Join und Right Join. Die zu vergleichenden Spalten müssen explizit Angegeben werden.")]),e._v(" "),n("p",[e._v("<color #ed1c24>UNTER MySQL nicht verfügbar")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT customer.id, customer.name, order.id, order.brutto FROM customer RIGHT JOIN order ON order.id = customer.order_id;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h4",{attrs:{id:"cross-join"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cross-join","aria-hidden":"true"}},[e._v("#")]),e._v(" CROSS JOIN")]),e._v(" "),n("p",[e._v("Dieser Join ist eine Mischung aus LEFT JOIN und RIGHT JOIN. Es werden alle Datensätze verknüpft. Es gibt keine Bedingungen. Das Resultat würde dann wie folgt aussehen:")]),e._v(" "),n("p",[e._v("<color #ed1c24>UNTER MySQL nicht verfügbar")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT * FROM TableA JOIN TableB;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("| id |\n| -- | name      | nation  |\n| ------- | table | id |\n| -- | name   | nation |\n| ------ | table |\n|  1 | Albert    | Germany | A     |  1 | Marc   | China  | B     |\n|  2 | Elizabeth | England | A     |  1 | Marc   | China  | B     |\n|  3 | Paul      | Spain   | A     |  1 | Marc   | China  | B     |\n|  4 | Julia     | Denmark | A     |  1 | Marc   | China  | B     |\n|  1 | Albert    | Germany | A     |  2 | Albert | France | B     |\n|  2 | Elizabeth | England | A     |  2 | Albert | France | B     |\n|  3 | Paul      | Spain   | A     |  2 | Albert | France | B     |\n|  4 | Julia     | Denmark | A     |  2 | Albert | France | B     |\n|  1 | Albert    | Germany | A     |  3 | Peter  | Japan  | B     |\n|  2 | Elizabeth | England | A     |  3 | Peter  | Japan  | B     |\n|  3 | Paul      | Spain   | A     |  3 | Peter  | Japan  | B     |\n|  4 | Julia     | Denmark | A     |  3 | Peter  | Japan  | B     |\n|  1 | Albert    | Germany | A     |  4 | Paul   | Poland | B     |\n|  2 | Elizabeth | England | A     |  4 | Paul   | Poland | B     |\n|  3 | Paul      | Spain   | A     |  4 | Paul   | Poland | B     |\n|  4 | Julia     | Denmark | A     |  4 | Paul   | Poland | B     |")])])}),[],!1,null,null,null);a.default=t.exports}}]);