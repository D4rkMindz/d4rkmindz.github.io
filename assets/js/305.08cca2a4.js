(window.webpackJsonp=window.webpackJsonp||[]).push([[305],{540:function(e,n,i){"use strict";i.r(n);var r=i(4),t=Object(r.a)({},(function(){var e=this,n=e.$createElement,i=e._self._c||n;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h2",{attrs:{id:"dependency-inversion-principle"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#dependency-inversion-principle","aria-hidden":"true"}},[e._v("#")]),e._v(" Dependency Inversion Principle")]),e._v(" "),i("p",[e._v("Das Dependency Inversion Principle (DIP) ist das D in "),i("a",{attrs:{href:"/de/wiki/programmiersprachen/php/solid"}},[e._v("SOLID")]),e._v(". Es definiert, dass man einen Aufruf nur in eine Richtung machen kann (Ein Controller kann einen Service aufrufen aber nicht umgekehrt). Die offizielle Definition lautet jedoch wie folgt:")]),e._v(" "),i("blockquote",[i("p",[e._v("**\n**\n**\n**")])]),e._v(" "),i("p",[e._v("Der Vorteil, welcher hier entsteht, ist, dass Module (z. B. das logging-Modul logger) ganz einfach ersetzt werden können.")]),e._v(" "),i("p",[e._v('Abhängigkeiten werden mittels Dependency Injection geregelt. So fordert ein Modul nur die benögtigten Abhängigkeiten und diese bleiben "übersichtlich".')]),e._v(" "),i("p",[e._v("Das Instanzieren dieser Objekte wird von einem übergeordnetem, zentralen Modul übernommen (z. B. ein Container).")])])}),[],!1,null,null,null);n.default=t.exports}}]);