(window.webpackJsonp=window.webpackJsonp||[]).push([[323],{557:function(e,n,t){"use strict";t.r(n);var r=t(4),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"programmiertipps"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#programmiertipps","aria-hidden":"true"}},[e._v("#")]),e._v(" Programmiertipps")]),e._v(" "),t("p",[e._v("Um einen Sauberen Code zu schreiben, reicht es nicht, nur die Syntax zu verstehen. Wichtig ist auch, dass man den Code so schreibt, dass eine anderer "),t("a",{attrs:{href:"/de/wiki/programmierer"}},[e._v("Programmierer")]),e._v(" ihn auch lesen und verstehen kann. Dazu kann ich folgende Tipps geben:")]),e._v(" "),t("p",[e._v("TODO: fix indexmenu>:wiki:programmiersprachen:programmiertipps#1|js#tango.png}}")]),e._v(" "),t("p",[e._v("Wichtig sind auch folgende Sachen:")]),e._v(" "),t("p",[e._v("Code > Comments")]),e._v(" "),t("p",[e._v("Code = how\nTests = what\nComment = why")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"dokumentation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dokumentation","aria-hidden":"true"}},[e._v("#")]),e._v(" Dokumentation")]),e._v(" "),t("p",[e._v("Es ist wichtig, zum Verständnis im Code gewisse Kommentare anzulegen. In PHP gibt es die Möglichkeit "),t("a",{attrs:{href:"/de/wiki/programmiersprachen/php/docblock"}},[e._v("DocBlocks")]),e._v(" zu schreiben. Diese Möglichkeit sollte man nutzen.")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"dry-don-t-repeat-yourself"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dry-don-t-repeat-yourself","aria-hidden":"true"}},[e._v("#")]),e._v(" DRY - Don't Repeat Yourself")]),e._v(" "),t("p",[e._v('Mit DRY ist gemeint, dass man Redundanzen vermeiden soll. Also ein mehrfach vorkommendes Codesegement in eine Funktion schreiben. Ebenso sollte man auf "Copy & Paste" verzichten.')]),e._v(" "),t("p",[e._v("(Wikipedia: "),t("a",{attrs:{href:"https://de.wikipedia.org/wiki/Don%E2%80%99t_repeat_yourself",target:"_blank",rel:"noopener noreferrer"}},[e._v("DRY"),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"kiss-keep-it-simple-stupid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kiss-keep-it-simple-stupid","aria-hidden":"true"}},[e._v("#")]),e._v(" KISS - Keep It Simple & Stupid")]),e._v(" "),t("p",[e._v("//In seiner Grundaussage ähnelt das KISS-Prinzip stark der Aussage von Ockhams Rasiermesser: wenn es mehrere Erklärungen für einen bestimmten Sachverhalt gibt, dann ist diejenige Erklärung zu bevorzugen, die am einfachsten ist, also mit den wenigsten Annahmen und Variablen auskommt.")]),e._v(" "),t("p",[e._v("(Quelle: "),t("a",{attrs:{href:"https://de.wikipedia.org/wiki/KISS-Prinzip",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wikipedia"),t("OutboundLink")],1),e._v(")//")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"return-early-and-often"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#return-early-and-often","aria-hidden":"true"}},[e._v("#")]),e._v(" Return early and often")]),e._v(" "),t("p",[e._v("Dieses Prinzip ist für Funktionen. Wichtig ist hier, dass man so früh wie möglich einen "),t("a",{attrs:{href:"/de/wiki/programmiersprachen/php/function#return"}},[e._v("return")]),e._v(" macht. Wenn also eine Funktion prüft, ob eine Telefonnummer mehr als 3 und weniger als 50 Zeichen het und der geprüfte Wert 2 Zeichen lang ist, muss man nicht noch prüfen, ob die Telefonnummer kürzer als 50 Zeichen ist. Also kann man nach der (negativ) erfolgten Prüfung bereits Falsch zurückmelden. Ein Beispiel für eine solche Funktion("),t("a",{attrs:{href:"/de/wiki/programmiersprachen/php"}},[e._v("PHP")]),e._v("):")]),e._v(" "),t("p",[e._v("// richtig:\nfunction validate_phonenumber($phonenumber)\n{\n$lenght = count($phonenumber);\nif ($lenght < 3) {\nreturn false;\n}\nif ($lenght > 50) {\nreturn false\n}\nreturn true;\n}")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("// falsch (bad practice)\nfunction validate_phonenumber($phonenumber)\n{\n$lenght = count($phonenumber);\nif ($lenght > 3) {\nif ($lenght < 50) {\n$result = true;\n} else {\n$result = false;\n}\n} else {\n$result = false;\n}\nreturn $result;\n}")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"zyklomatische-komplexitat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zyklomatische-komplexitat","aria-hidden":"true"}},[e._v("#")]),e._v(" Zyklomatische Komplexität")]),e._v(" "),t("p",[e._v("Die Zyklomatische Komplexität ist ein Wert, welcher beschreibt, wie viele Pfade (verschiedene Durchläufe) möglich sind bei einem Programm. Je höher dieser Wert ist, desto fehleranfälliger ist das Programm. Laut dem "),t("a",{attrs:{href:"https://www.johner-institut.de/blog/iec-62304-medizinische-software/zyklomatische-komplexitaet/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Johner Institut / Prof. Dr. Christian Johner"),t("OutboundLink")],1),e._v(" kann man die Skala wie folgt definieren:")]),e._v(" "),t("p",[e._v("1-10: Nicht komplex, geringes Fehlerrisiko")]),e._v(" "),t("p",[e._v("11-20: Mittlere Komplexität, moderates Fehlerrisiko")]),e._v(" "),t("p",[e._v("21-50: Hohe Komplexität, hone Wahrscheinlichkeit eines Fehlers")]),e._v(" "),t("blockquote",[t("p",[e._v("50: Untestbares System, sehr hohe Wahrscheinlichkeit eines Fehlers")])]),e._v(" "),t("p",[e._v("Bei einem Programm, welches 7 Prüfungen hat (und einen Endpunkt), das wie folgt konstruiert ist, kann man 5 unabhängige Pfade Zählen:\n"),t("img",{attrs:{src:"/de/wiki/programmiersprachen/zyklomatische-komplexitaet.png",alt:"https://www.johner-institut.de/blog/wp-content/uploads/2014/04/Zyklomatische-Komplexit%C3%A4t.png"}})]),e._v(" "),t("ul",[t("li",[e._v("**")]),e._v(" "),t("li",[e._v("**")]),e._v(" "),t("li",[e._v("**")]),e._v(" "),t("li",[e._v("**")]),e._v(" "),t("li",[e._v("**")])]),e._v(" "),t("p",[e._v("Diese Pfade muss man dann auf Fehler testen, um die Fehleranfälligkeit so niedrig (oder am besten keine) zu halten.")]),e._v(" "),t("p",[e._v("Um seien PHP-Code auf die Zyklomatische Komplexität zu testen, kann man "),t("a",{attrs:{href:"https://scrutinizer-ci.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scrudinizer CI"),t("OutboundLink")],1),e._v(" anwenden. Dazu stellt man sein Projekt "),t("a",{attrs:{href:"/de/wiki/opensource"}},[e._v("OpenSource")]),e._v(" auf "),t("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),t("OutboundLink")],1),e._v(" und folgt den Anweisungen auf der Webseite von Scrudinizer CI.")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"lesbarkeit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lesbarkeit","aria-hidden":"true"}},[e._v("#")]),e._v(" Lesbarkeit")]),e._v(" "),t("p",[e._v("Viele Projekte werden meistens nicht nur von einer Person betreut. Deshalb ist es wichtig, dass der programmierte Code auch für andere Personen lesbar ist.\n"),t("img",{attrs:{src:"/de/wiki/programmiersprachen/codewritingfool-martinfowler.png",alt:"No alt text available"}}),e._v('\nEin schlechtes Beispiel (Java):\nimport java.util.Scanner;class test{public static void main(String [] args){Scanner s=new\nScanner(System.in);int input, output;System.out.print("please enter a number");input=s.nextInt();\noutput=input+2;System.out.print("your number + 2 is: "+output);}}\nDas obenstehende Beispiel fordert einem auf eine Zahl einzugeben und gibt danach die eingegebene Zahl + 2 aus. Für den Programmierer dieses Programmes ist der Code sicher leicht zu verstehen, jedoch für andere nicht. Der gleiche Code, jedoch sauber formatiert, sieh dann so aus:\nimport java.util.Scanner;')]),e._v(" "),t("p",[e._v('class test {\npublic static void main(String [] args){\nScanner s = new Scanner(System.in);\nint input, output;\nSystem.out.print("please enter a number");\ninput = s.nextInt();\noutput = input+2;System.out.print("your number + 2 is: "+output);\n}\n}\nBeide Programme machen genau das Gleiche (ohne Fehler). Jedoch ist die Weiterentwicklung des ersten Programmes einiges schwieriger als die des Zweiten.')]),e._v(" "),t("p",[e._v("Ein schlechtes Beispiel (PHP):\nif($_POST){$default=[];$default['username']='';$default['password']='';$data=[];$data=array_replace_recursive\n($default,$_POST);$user='root';$pass='';$dbh=new PDO('mysql:host=localhost,\ndbname=test',$user,$pass);$stmt=$pdo->prepare(\"SELECT * FROM users WHERE user =\n$data['username]\");$rows=$stmt->execute;foreach($rows as $row){$data['table']=$row}if($data['table']\n['username']==$data['username']&&$data['table']['password']==$data['password']){header(\"Location:\nloggedin.php\");}else{echo \"invalid user credentials\"};}\nDer gleiche Code, jedoch sauber formatiert ("),t("a",{attrs:{href:"https://github.com/php-fig/fig-standards/tree/master/accepted",target:"_blank",rel:"noopener noreferrer"}},[e._v("PSR 2"),t("OutboundLink")],1),e._v("):\nif($_POST){\n$default = [];\n$default['username'] = '';\n$default['password'] = '';\n$data = [];\n$data = array_replace_recursive($default,$_POST);\n$user = 'root';\n$pass = '';\n$dbh = new PDO('mysql:host=localhost, dbname=test',$user,$pass);\n$stmt=$pdo->prepare(\"SELECT * FROM users WHERE user = $data['username]\");\n$rows=$stmt->execute;\nforeach($rows as $row){\n$data['table'] = $row\n}\nif($data['table']['username'] ##### $data['username'] && $data['table']['password'] $data['password']){\nheader(\"Location: loggedin.php\");\n} else {\necho \"invalid user credentials\"\n}\n}\nDieser Code ist genau richtig formatiert nach dem PSR-2 Standard. Jedoch ist es empfehlenswert auch ab und zu mal einen Zeilenumbruch einzubauen (\"Das Auge programmiert mit\"):\nif($_POST){\n$default = [];\n$default['username'] = '';\n$default['password'] = '';")]),e._v(" "),t("pre",[t("code",[e._v("  $data = [];\n  $data = array_replace_recursive($default,$_POST);\n  \n  $user = 'root';\n  $pass = '';\n  $dbh = new PDO('mysql:host=localhost, dbname=test',$user,$pass);\n  $stmt=$pdo->prepare(\"SELECT * FROM users WHERE user = $data['username]\");\n  $rows=$stmt->execute;\n  \n  foreach($rows as $row){\n      $data['table'] = $row\n  }\n  \n  if($data['table']['username'] ##### $data['username'] && $data['table']['password'] $data['password']){\n      header(\"Location: loggedin.php\");\n  } else {\n      echo \"invalid user credentials\"\n  }\n")])]),e._v(" "),t("p",[e._v("}\nDieses Beispiel ist perfekt. Man hat sauberen Code (wie sinnvoll dieser ist, sei mal so dahingestellt). Wenn man sich nicht die Mühe machen will, jedes Mal vor einem Push auf GitHub den ganzen Code durchzulesen, dann kann ich "),t("a",{attrs:{href:"https://styleci.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("StyleCI"),t("OutboundLink")],1),e._v(" empfehlen. Diese Webseite prüft (bei korrekter konfiguration), ob der Code dem gewünschten Standard enspricht (PSR 1, 2, etc).")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"cloaking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cloaking","aria-hidden":"true"}},[e._v("#")]),e._v(" Cloaking")]),e._v(" "),t("p",[e._v("Cloaking wird das Spammen von Suchmaschinen genannt. Man platziert unsichtbare Tags innerhalb seiner Webseite und hofft so auf ein besseres Ranking durch Suchmaschinen. Das wird heutzutage sehr hart bestraft (die Webseite landet auf der letzten Seite von Google).")])])}),[],!1,null,null,null);n.default=a.exports}}]);