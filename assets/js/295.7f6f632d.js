(window.webpackJsonp=window.webpackJsonp||[]).push([[295],{325:function(s,t,e){"use strict";e.r(t);var n=e(4),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"php-allgemein"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#php-allgemein","aria-hidden":"true"}},[s._v("#")]),s._v(" PHP - Allgemein")]),s._v(" "),e("p",[s._v("PHP ist die Programmiersprache zum austausch der Daten zwischen Server")]),s._v(" "),e("p",[s._v("und Webseite. Man kann auch Variabeln und Funktionen Definieren. Diese")]),s._v(" "),e("p",[s._v("Programmiersprache ist Serverseitig.")]),s._v(" "),e("p",[e("img",{attrs:{src:"/de/wiki/780px-php_funktionsweise.svg.png",alt:"No alt text available"}})]),s._v(" "),e("p",[s._v("Die PHP-Syntax ist ähnlich wie die von "),e("a",{attrs:{href:"/de/wiki/c"}},[s._v("C")]),s._v(".")]),s._v(" "),e("h3",{attrs:{id:"variabeln"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#variabeln","aria-hidden":"true"}},[s._v("#")]),s._v(" Variabeln")]),s._v(" "),e("p",[s._v("Eine Variable ist ein Behälter für einen Wert. Dieser Wert kann folgendes sein:")]),s._v(" "),e("p",[s._v("String   = Eine Abfolge von Buchstaben in möglicher Kombination von Zahlen.\nInteger  = Ein Zahlenwert\nBoolean  = Ein True oder False Wert. Nichts anderes")]),s._v(" "),e("p",[s._v("Eine Variable wird in PHP wie folgt definiert:")]),s._v(" "),e("div",{staticClass:"language-php line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"String"')]),s._v("    String\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$b")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("          Integer\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$c")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean constant"}},[s._v("true")]),s._v("        Boolean```\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token shell-comment comment"}},[s._v("### Array")]),s._v("\nEin "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Array")]),s._v(" ist vergleichbar mit einen Haufen kleinerer Kartons "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Variabeln"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" Im folgenden Beispiel sind in der Haufen "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"Brot"')]),s._v(" mit den Schlüsseln "),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[s._v("'mehl'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[s._v("'wasser'")]),s._v(" und "),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[s._v("'hefe'")]),s._v(" ausgestattet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Die")]),s._v(" Schlüssel kann man auf zwei Arten zuweisen"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Variante "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("\n\n\n```php\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$brot")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("array")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$brot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[s._v("'mehl'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$brot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[s._v("'wasser'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean constant"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$brot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[s._v("'hefe'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"10g"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" ```\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Variante "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("\n\n\n```php\n"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$brot")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"mehl"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"wasser"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean constant"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"hefe"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"10g"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("```\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token shell-comment comment"}},[s._v("### if / else Statement")]),s._v("\nEin "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" Statement gibt einem "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("die")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("M")]),s._v("öglichkeit etwas zu prüfen und darauf zu reagieren"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" Ein solches Statement kann folgendermassen aussehen "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Werte aus dem Abschnitt Variabeln"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n```php\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$b")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"Hallo Welt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"Bye Welt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])]),e("p",[s._v("Für die Prüfung in einem if/else Statement kann man folgende Operatoren brauchen:")]),s._v(" "),e("p",[s._v("==   ist gleich (ist ein gleicher Wert, der Typ ist jedoch egal)\n===  identisch  (gleicher Wert, gleicher Typ)")]),s._v(" "),e("blockquote",[e("p",[s._v("grösser als\n=   grösser gleich\n<    kleiner als\n<=   kleiner gleich\n<>   ungleich\n!=   ungleich\n!==  nicht identisch")])]),s._v(" "),e("p",[s._v('wenn die Prüfung den Wert "true" zurückliefert, wird der Code innerhalb der ersten geschweiften Klammern ausgeführt, sonst der innerhalb der nach dem else.')]),s._v(" "),e("p",[s._v("Man kann auch auf mehrere Werte prüfen (Werte aus dem Abschnitt Variabeln):")]),s._v(" "),e("div",{staticClass:"language-php line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"string"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")])]),s._v(' hat den Wert string"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elseif")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$b")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean constant"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$b")])]),s._v(' ist wahr"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elseif")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$c")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$c")])]),s._v(' ist nicht Int. 12"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[s._v('"nichts ist wahr"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v('Da $a den Wert "String" und nicht "string" hat wird hier false zurückgeliefert. Die zweite Prüfung liefert dann true zurück ($b hat den Booleanwert true). $c hat den Integer 12 und nicht 13. Deshalb sollte hier ja ein true zurückgeliefert werden. Das passiert jedoch nicht, da ebenfalls auf den Integer geprüft wird und das darf bei der Prüfung !== (nicht identisch) nicht wahr sein (es darf nicht beides mal der Selbe Typ sein). Falls keine der Prüfungen zutreffen sollte, würde "nichts ist wahr" ausgegeben werden.')]),s._v(" "),e("p",[s._v('In diesem Beispiel würde "$b ist wahr" ausgegeben werden. Dies ist die einzige Prüfung, welche wahr wäre.')]),s._v(" "),e("h3",{attrs:{id:"htmlentities"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#htmlentities","aria-hidden":"true"}},[s._v("#")]),s._v(" htmlentities")]),s._v(" "),e("p",[s._v("Dies wird benötigt, um Text so zu konvertieren, dass der Browser ihn sicher versteht. Dies ist nur bei eingabefeldern nötig. Wenn ein Benutzer "),e("b",[s._v(" hallo ")]),s._v(" eingibt, ergibt dies ohne htmlentities "),e("strong",[s._v("hallo")]),s._v(". Mit htmlentities ergibt dies &ltb&gt hallo &lt/b&gt, was der Browser wieder als "),e("b",[s._v(" hallo ")]),s._v(" ausgibt.")]),s._v(" "),e("p",[s._v("&lt = lower than(kleiner als, <)")]),s._v(" "),e("p",[s._v("&gt = greater than(grösser als, >)")]),s._v(" "),e("p",[s._v("&#039 = ' (einfaches Anführungszeichen)")]),s._v(" "),e("p",[s._v('&quot = " (doppeltes Anführungszeichen)')]),s._v(" "),e("p",[s._v("&amp = & (kaufmännisches und Zeichen)")]),s._v(" "),e("p",[s._v("htmlentities wird mit ** festgelegt.")])])}),[],!1,null,null,null);t.default=a.exports}}]);